FROM php:7.2.1-apache

# the script that runs at the startup
COPY docker/init.sh /bin/

RUN apt-get update

# setup ssh server
RUN apt-get install -y --no-install-recommends dialog \
	&& apt-get install -y --no-install-recommends openssh-server \
	&& echo "root:Docker!" | chpasswd

# needs refactoring adn checking 
RUN rm -f /var/log/apache2/* \
   && rmdir /var/lock/apache2 \
   && rmdir /var/run/apache2 \
   && rmdir /var/log/apache2 \
   && chmod 777 /var/log \
   && chmod 777 /var/run \
   && chmod 777 /var/lock \
   && chmod 777 /bin/init.sh \
   && rm -rf /var/log/apache2 \
   && mkdir -p /home/LogFiles \
   && ln -s /home/LogFiles /var/log/apache2

# ssh config
COPY docker/sshd_config /etc/ssh/

# expose the HTTP port for the apache server and 2222 for Azure SSH connection
EXPOSE 2222 8080

# set the environment variables
ENV PHP_VERSION 7.2
ENV APACHE_RUN_USER www-data
ENV PORT 8080
ENV SSH_PORT 2222

ENV WEBSITE_ROLE_INSTANCE_ID localRoleInstance
ENV WEBSITE_INSTANCE_ID localInstance
ENV PATH ${PATH}:/var/wwww/html

# Update + Dependencies
RUN apt-get install -y libzip-dev libjpeg62-turbo-dev libpng-dev libfreetype6-dev vim nano
RUN docker-php-ext-install pdo_mysql mbstring zip

# Apache
# remove defaults
RUN rm /etc/apache2/sites-available/000-default.conf
RUN rm /etc/apache2/sites-available/default-ssl.conf
RUN rm /etc/apache2/sites-enabled/000-default.conf

# add conf
COPY docker/vhost.conf /etc/apache2/sites-enabled/
COPY docker/enabled-app.conf /etc/apache2/sites-available/

RUN chown -R www-data:www-data /var/www/html && a2enmod rewrite

# Install CRON
RUN apt-get install -y cron

# Install Composer, NodeJS, NPM and Git (needed by Composer)
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash -
RUN apt-get install -y nodejs git

# copy the project inside the image
COPY . /var/www/html

# change the workdirectory to the project's directory
# following commands will run from inside this folder
WORKDIR /var/www/html

# make the .env file
COPY docker/.env.template /var/www/html/.env
COPY docker/.htaccess /var/www/html/public/.htaccess

# Setup the laravel project inside the container
# Create log file for Laravel and give it write access
# www-data is a standard apache user that must have an
# access to the folder structure
RUN chgrp -R www-data storage bootstrap/cache \
    && chown -R www-data storage bootstrap/cache \
    && chmod -R ug+rwx storage bootstrap/cache \
    && touch storage/logs/laravel.log \
    && chmod 775 storage/logs/laravel.log \
    && chown www-data storage/logs/laravel.log

# Install composer dependencies
RUN composer install

# Install npm dependencies
RUN npm install
RUN chmod -R a+x node_modules
RUN npm rebuild

# Run Mix/Webpack
RUN npm run production

# Generate project key
RUN php artisan key:generate

# reload server conf, now that we have the public folder created
RUN service apache2 restart

# Copy cron file to the cron.d directory
COPY docker/app-cron /etc/cron.d/app-cron

# Give execution rights on the cron job
RUN chmod 0644 /etc/cron.d/app-cron

# Apply cron job
RUN crontab /etc/cron.d/app-cron

# Create the log file to be able to run tail
RUN touch /var/log/cron.log

# Run the command on container startup
CMD cron && apache2-foreground && tail -f /var/log/cron.log

# PHP
RUN echo "upload_max_filesize = 256M" > /usr/local/etc/php/conf.d/maxsizes.ini
RUN echo "post_max_size = 257M" >> /usr/local/etc/php/conf.d/maxsizes.ini
RUN echo "memory_limit = 512M" >> /usr/local/etc/php/conf.d/maxsizes.ini
# RUN echo "disable_functions = exec,system,passthru,popen,proc_open,shell_exec" >> /usr/local/etc/php/conf.d/maxsizes.ini
RUN echo "display_errors = Off" >> /usr/local/etc/php/conf.d/maxsizes.ini

# entry point into the container
ENTRYPOINT ["/bin/init.sh"]
